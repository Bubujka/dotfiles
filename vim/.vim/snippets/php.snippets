# action definition
snippet ad
	public function action${1:Main}(${0}){
	}

# function definition
snippet fd
	public function ${1:main}(${0})
	{
	}

# funciton call
snippet fc
	${1:main}(${0})

# last funciton call
snippet lfc
	${1:main}(${0});

# foreach
snippet fe
	foreach(${0}){
	}

# foreach $k => $v
snippet fekv
	foreach(${0} as $k=>$v){
	}

# return
snippet re
	return ${0};

# anonymous function
snippet af
	function(${0}){
	}

snippet arr
	[
		${0}
	]
snippet var
	$${1:what} = ${0};

snippet vp
	$${1:what}['${2:what}']${0}
snippet prd
	'${1:what}' => ${0},
snippet pr
	[${1:$what}]${0}
snippet mc
	$${1:what}->${2:what}(${0})
snippet smc
	$${1:what}::${2:what}(${0})
snippet if
	if(${1:what}){
		${0}
	}
snippet else
	else{
		${0}
	}
snippet eif
	elseif(${1:what){
		${0}
	}
snippet each
	foreach(${1:$what} as $${2:k}=>$${3:v}){
		${0}
	}
snippet testcase
	<?php
	class ${1:What}Test extends PHPUnit_Framework_TestCase{
		${0}
	}
snippet testmethod
	public function test${1:What}(){
	}

snippet ae
	$this->assertEqual(${0});
snippet css
		<link rel="stylesheet" href="${0}.css">
snippet bcss
		<link rel="stylesheet" href="/bower_components/${0}.css">
snippet js
		<script src="${0}.js"></script>
snippet bjs
		<script src="/bower_components/${0}.js"></script>

snippet slim
	<?php
	use \Psr\Http\Message\ServerRequestInterface as Request;
	use \Psr\Http\Message\ResponseInterface as Response;

	require '../vendor/autoload.php';

	$app = new \Slim\App;
	$app->get('/hello/{name}', function (Request $request, Response $response) {
			$name = $request->getAttribute('name');
			$response->getBody()->write("Hello, $name");

			return $response;
	});
	$app->run();
snippet dotenv
	$dotenv = new Dotenv\Dotenv(__DIR__);
	$dotenv->overload();

snippet phpmailer
		$mail = new \PHPMailer;

		$mail->isSMTP();
		$mail->Host = $_SERVER['MAIL_SMTP_HOST'];
		$mail->SMTPAuth = true;
		$mail->Username = $_SERVER['MAIL_SMTP_USER'];
		$mail->Password = $_SERVER['MAIL_SMTP_PASSWORD'];
		$mail->SMTPSecure = 'tls';
		$mail->Port = 587;

		$mail->setFrom($_SERVER['MAIL_FROM'], $_SERVER['MAIL_FROM_NAME']);
		$mail->addAddress($this->fidelioInfo()->email(), $this->fidelioInfo()->name());

		$mail->CharSet = 'utf-8';
		$mail->isHTML(true);

		$mail->Subject = $_SERVER['MAIL_SUBJECT'];

		$mail->Body    = static::view('mail-html', ['transaction'=>$this]);
		$mail->AltBody = static::view('mail-txt', ['transaction'=>$this]);

		if($mail->send()){
			$this->mail_sended = true;
			$this->save();
		}
