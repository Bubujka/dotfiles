snippet ra-resource
	import { ${1:Model}List, $1Edit, $1Show, $1Create } from './${2:model}'
	<Resource name="$2" list={$1List} edit={$1Edit} show={$1Show} create={$1Create}/>

snippet dc
	// doccofile: ${0}


snippet withPanel
	withPanel(debugPanel, {
		name: '${0}-panel',
		tbg: 'corp',
		ico: 'acorn'
	})

	function debugPanel(gui, adder){
		// let add = adder(state);
	}

snippet setup
	<script setup>
		${0}
	</script>

snippet ra-field
	import React from 'react';

	const ${1:MyUrl}Field = ({ record = {}, source }) =>
			<a href={record[source]}>
					{record[source]}
			</a>;

	export default $1Field;
snippet ra-model
	import React from 'react'
	import { ListGuesser, EditGuesser, ShowGuesser } from 'react-admin'
	import {
		List, Datagrid, TextField, ReferenceField,
		Show, Edit, Create, SimpleForm, SimpleShowLayout, TextInput, ReferenceInput, SelectInput, DisabledInput, LongTextInput
	} from 'react-admin';

	export const ${1:Model}List = ListGuesser;
	export const $1Edit = EditGuesser;
	export const $1Show = ShowGuesser;
	export const $1Create = props => (
		<div></div>
	);


snippet pt
	// @format

# this method call
snippet tmc
	this.${1:main}(${0})

# module.exports
snippet me
	module.exports ${0}

# object function
snippet of
	${1:main}() {
	}

# promise resolve
snippet p.r
	Promise.resolve(${0})

# return
snippet re
	return ${0};
# .then
snippet .t
	.then(${0})

snippet rq!
	const ${1:what} = require('${2:what}');
	${0}

snippet rq
	const ${1:what} = require('$1');
	${0}

snippet terr
	if(err){
		throw err;
	}${0}

snippet err
	if(err){
		return ${1:next}(err);
	}${0}

snippet terr
	if(err){
		throw err;
	}${0}

# function call
snippet fc
	${1:main}(${0})

# chain call
snippet cc
	.${1:then}(${0})

# chain call
snippet lcc
	.${1:then}(${0});

# full anon function
snippet faf
	function(${1}){
		${0}
	}

# arrow function
snippet af
	(${1}) => {
		${0}
	}

# short arrow function
snippet saf
	(${1}) => ${0}

# last function call
snippet lfc
	${1:main}(${0});


snippet fa
	${1:what} = function(${2}){
		${0}
	}

snippet pr
	${1:what}: ${0},

snippet if
	if(${1:what}){
		${0}
	}

snippet else
	else{
		${0}
	}

snippet eif
	else if(${1:what}){
		${0}
	}

snippet fe
	for(var ${1:i} in ${2:arr}){
		${0}
	}

snippet cl
	console.log(${0});


snippet describe
	describe('${1}', () => {
		${0}
	});

snippet it
	it('${1}', () => {
		${0}
	});


snippet supertest
	var supertest = require('supertest');

snippet agent
	var agent = supertest.agent(process.env.API_SERVER_URI);

snippet promise
	return new Promise((resolve, reject) => {
		${0}
	});

snippet env
	process.env.${0}

snippet should
	require('should');

snippet dotenv
	require('dotenv').load();

snippet async
	const async = require('async');

snippet underscore
	const _ = require('underscore');

snippet chance
	const chance = require('chance')();

snippet bb
	const Bluebird = require('bluebird');

snippet fu
	function ${1:main}(){
		${0}
	}

snippet 'u
	'use strict';


snippet edl
	// eslint-disable-line

snippet cb
	this.${1:what} = this.$1.bind(this);


snippet cf
	${1:what}() {
		$0
	}
snippet km
	exports.up = function (knex) {
		return knex.schema.${0};
	};

	exports.down = function () {
	};

snippet ds
	/**
	 * ${0}
	 */

snippet inm
	function main(){
		${0}
	}

	if(require.main === module){
		main();
	}
snippet exit
	process.exit();

snippet @pr
	@private
snippet @pa
	@param {${1:type}} ${2:name} $0


snippet we
	watchEffect($1)
	function $1(){
	}


snippet f
	($1) => {
		$0
	}
snippet fu
	function ${1:hello}(){
		$0
	}

